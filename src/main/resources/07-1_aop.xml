<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- 핵심관심모듈이 선언된 클래스를 Spring Bean으로 등록 -->
	<bean class="site.itwill07.aop.StudentDAOImpl" id="studentDAO"/>
	<bean class="site.itwill07.aop.StudentServiceImpl" id="studentService">
		<property name="studentDAO" ref="studentDAO"/>
	</bean>
	
	<!-- 횡단관심모듈이 선언된 클래스(Advice)를 Spring Bean으로 등록 -->
	<bean class="site.itwill07.aop.StudentAdvice" id="studentAdvice"/>
	
	<!-- config : Spring AOP 기능(AspectJ)을 구현하기 위한 상위 엘리먼트 -->
	<aop:config>
		<!-- aspect : 핵심관심모듈에 횡단관심모듈을 원하는 위치(JoinPoint)에 삽입되어 실행되도록 설정하는 엘리먼트 -->
		<!-- => 핵심관심모듈을 PointCut으로 지정하여 타겟메소드로 설정 -->
		<!-- ref 속성 : 횡단관심모듈이 선언된 Spring Bean의 beanName을 속성값으로 설정 -->
		<aop:aspect ref="studentAdvice">
			<!-- before : 핵심관심모듈 앞에 횡단관심모듈을 삽입하기 위한 엘리먼트 - JoinPoint -->
			<!-- method 속성 : 횡단관심모듈의 메소드명을 속성값으로 설정 -->
			<!-- pointcut 속성 : 핵심관심모듈을 타겟메소드로 지정하기 위한 정보를 속성값으로 설정 -->
			<!-- => execution 속성값 : 타겟메소드를 PointCut 표현식으로 설정 -->
			<!-- => within 속성값 : 타겟메소드를 클래스(Spring Bean)로 설정 -->
			
			<!-- execution 속성값을 이용하여 타겟메소드를 설정하는 방법 -->
			<!-- 형식) execution([접근지정자] 반환형 [패키지명.클래스명.]메소드명(자료형,자료형,...))-->
			<!-- => 메소드 머릿부를 표현(PointCut 표현식)하여 타겟메소드 지정 - 패턴기호과 연산자 사용 -->
			<!-- => 클래스명 대신 인터페이스 사용 가능 -->
			<!-- PointCut 표현식의 패턴기호 : ..(0개 이상), *(1개 이상), +(0개 또는 1개) -->
			<!-- PointCut 표현식의 연산자 : !(NOT), &&(AND), ||(OR) -->
			<!-- <aop:before method="beforeLog" pointcut="execution(void addStudent(site.itwill07.aop.Student))"/> -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* *(..))"/> -->
			<!-- <aop:before method="beforeLog" pointcut="execution(site.itwill07.aop.Student *(*))"/> -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* get*(..))"/> -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* site.itwill07.aop.StudentDAO.*(..))"/> -->
			
			<!-- within 속성값을 이용하여 타겟메소드를 설정하는 방법 -->
			<!-- 형식) within(패키지명.클래스명)-->
			<!-- => Spring Bean으로 등록된 클래스의 모든 메소드의 타겟메소드로 지정 -->
			<!-- => 클래스명은 PointCut 표현식의 패턴기호와 연산자를 이용하여 표현 가능 -->
			<!-- => 클래스명 대신 인터페이스명 사용 불가능 -->
			<!-- <aop:before method="beforeLog" pointcut="within(site.itwill07.aop.StudentDAOImpl)"/>  -->
			
			<!-- pointcut : 핵심관심모듈을 타겟메소드로 지정하기 위한 엘리먼트 -->
			<!-- => PointCut 설정을 재사용하여 유지보수의 효율성 증가 -->
			<!-- expression 속성 : 핵심관심모듈을 타겟메소드로 지정하기 위한 정보를 속성값으로 설정 -->
			<!-- => execution 속성값과 within 속성값 중 하나를 선택하여 사용 -->
			<!-- id 속성 : pointcut 엘리먼트의 고유값을 속성값으로 설정 -->
			<aop:pointcut expression="execution(* site.itwill07.aop.StudentDAO.*(..))" id="studentDAOPointcut"/>

			<!-- JoinPoint 관련 엘리먼트에서 pointcut-ref 속성으로 pointcut 엘리먼트 고유값을 
			속성값으로 설정하여 타겟메소드 지정 -->
			<aop:before method="beforeLog" pointcut-ref="studentDAOPointcut"/>
			
			<!-- after : 핵심관심모듈 뒤에 횡단관심모듈을 삽입하기 위한 엘리먼트 - JoinPoint -->
			<!-- => 핵심관심모듈 실행에 대한 예외와 상관없이 횡단관심모듈을 무조건 삽입하여 실행 -->
			<aop:after method="afterLog" pointcut-ref="studentDAOPointcut"/>
			
			<!-- after-returning : 핵심관심모듈 뒤에 횡단관심모듈을 삽입하기 위한 엘리먼트 - JoinPoint -->
			<!-- => 핵심관심모듈 실행시 예외가 발생하지 않은 경우 횡단관심모듈을 삽입하여 실행 -->
			<aop:after-returning method="afterReturningLog" pointcut-ref="studentDAOPointcut"/>

			<!-- after-throwing : 핵심관심모듈 뒤에 횡단관심모듈을 삽입하기 위한 엘리먼트 - JoinPoint -->
			<!-- => 핵심관심모듈 실행시 예외가 발생된 경우 횡단관심모듈을 삽입하여 실행 -->
			<aop:after-throwing method="afterThrowingLog" pointcut-ref="studentDAOPointcut"/>

			<!-- around : 핵심관심모듈 앞뒤에 횡단관심모듈을 삽입하기 위한 엘리먼트 - JoinPoint -->
			<aop:around method="aroundLog" pointcut-ref="studentDAOPointcut"/>
		</aop:aspect>
	</aop:config>
</beans>