<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- 기본 생성자를 이용하여 Spring Bean 생성 - 필드에는 기본값 저장 -->
	<bean class="site.itwill05.di.Student" id="student1"/>
	
	<!-- 매개변수가 선언된 생성자를 이용하여 Spring Bean 생성 -->
	<!-- => 생성자의 매개변수에 값을 전달하여 필드값 초기화 : Constructor Injection -->
	<bean class="site.itwill05.di.Student" id="student2">
		<!-- constructor-arg : 생성자의 매개변수에 값(객체)을 전달하기 위한 엘리먼트 -->
		<!-- => 엘리먼트의 갯수만큼 매개변수가 선언된 생성자를 반드시 선언 -->
		<!-- => 전달값은 기본적으로 문자열(String)로 전달 - 매개변수에 자료형에 따라 자동 형변환 -->
		<!-- value 속성 : 생성자의 매개변수에 전달할 값을 속성값으로 설정 - Value Injection -->
		<constructor-arg value="1000"/>
	</bean>
	
	<!-- constructor-arg 엘리먼트 순서에 의해 매개변수에 값(객체)이 차례대로 전달 -->
	<!-- => 매개변수의 자료형에 의해 전달값이 형변환되어 저장 - 형변환시 예외 발생 가능 -->
	<!--  
	<bean class="site.itwill05.di.Student" id="student3">
		<constructor-arg value="2000"/>
		<constructor-arg value="홍길동"/>
		<constructor-arg value="abc123@itwill.site"/>
	</bean>
	-->
	
	<bean class="site.itwill05.di.Student" id="student3">
		<!-- index 속성 : 생성자의 매개변수에 전달되는 값(객체)의 순서를 속성값으로 설정 -->
		<!-- => 속성값은 0부터 1씩 증가되는 정수값 사용 -->
		<constructor-arg value="홍길동" index="1"/>
		<constructor-arg value="2000" index="0"/>
		<constructor-arg value="abc123@itwill.site" index="2"/>
	</bean>
	
	<!-- 기본 생성자를 이용하여 Spring Bean 생성 - 필드에는 기본값 저장 -->
	<!-- => Setter 메소드를 호출하여 필드값 변경 - Setter Injection -->
	<bean class="site.itwill05.di.Student" id="student4">
		<!-- property : 필드의 Setter 메소드를 호출하여 필드값을 변경하는 엘리먼트 -->
		<!-- name 속성 : 변경할 필드명을 속성값으로 설정 - 자동 완성 기능 제공 -->
		<!-- value 속성 : Setter 메소드의 매개변수에 전달할 값을 속성값으로 설정 - Value Injection -->
		<property name="num" value="3000"/>
		<property name="name" value="임꺽정"/>
		<property name="email" value="xyz789@itwill.site"/>
	</bean>
	
	<!-- Constructor Injection과 Setter Injection를 같이 사용하여 필드값 설정 가능 -->
	<bean class="site.itwill05.di.Student" id="student5">
		<constructor-arg value="4000"/>
		<constructor-arg value="전우치"/>
		<property name="email" value="asd456@itwill.site"/>
	</bean>
	
	<!-- PropertyPlaceholderConfigurer : Properties 파일을 읽어 Bean Configuration File에서
	값을 사용할 수 있도록 하는 기능을 제공하는 클래스  -->
	<!-- => locations 필드에는 Properties 파일의 경로를 전달하여 변경 -->
	<!-- => Bean Configuration File에서는 ${Key} 형식으로 표현하여 값을 제공 -->
	<!--  
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="site/itwill05/di/student.properties"/>
	</bean>
	-->
	
	<!-- Spring 5.2 이상에서는 PropertySourcesPlaceholderConfigurer 클래스 사용 권장 -->
	<bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
		<property name="locations" value="site/itwill05/di/student.properties"/>
	</bean>
	
	<bean class="site.itwill05.di.Student" id="student6">
		<property name="num" value="${num}"/>
		<property name="name" value="${name}"/>
		<property name="email" value="${email}"/>
	</bean>	
	
	<!-- DAO 클래스를 Spring Bean으로 등록 -->
	<bean class="site.itwill05.di.StudentJdbcDAO" id="studentJdbcDAO"/>
	<bean class="site.itwill05.di.StudentMybatisDAO" id="studentMybatisDAO"/>
	
	<!-- Service 클래스를 Spring Bean으로 등록 -->
	<!-- => 기본 생성자를 이용하여 Spring Bean을 생성하여 등록 : 필드에 기본값 저장 - 포함관계 미설정 -->
	<!-- => 필드에 null이 저장되어 있으므로 필드로 메소드를 호출할 경우 NullPointerException 발생 -->
	<!-- <bean class="site.itwill05.di.StudentServiceImpl" id="studentServiceImpl"/> -->
	
	<!-- 매개변수가 선언된 생성자를 이용하여 Spring Bean 생성 -->
	<!-- => 생성자의 매개변수에 객체(Spring Bean)를 전달하여 포함(의존)관계 구현 : Constructor Injection -->
	<!-- ref 속성 : 매개변수에 전달할 Spring Bean의 beanName을 속성값으로 설정 - Dependency Injection -->
	<!-- 
	<bean class="site.itwill05.di.StudentServiceImpl" id="studentServiceImpl">
		<constructor-arg ref="studentJdbcDAO"/>
	</bean>
	-->	

	<!-- 기본 생성자를 이용하여 Spring Bean 생성 - 필드에는 기본값 저장 -->
	<!-- => Setter 메소드를 호출하여 포함(의존)관계 구현 - Setter Injection -->
	<!--  	
	<bean class="site.itwill05.di.StudentServiceImpl" id="studentServiceImpl">
		<property name="studentJdbcDAO" ref="studentJdbcDAO"/>
	</bean>
	-->
	
	<!-- property 엘리먼트의 ref 속성값을 변경하면 의존관계 변경 -->
	<!-- => 프로그램이 아닌 XML 파일을 이용하여 의존관계 설정 및 변경 용이 -->
	<bean class="site.itwill05.di.StudentServiceImpl" id="studentService">
		<!-- <property name="studentDAO" ref="studentJdbcDAO"/> -->
		<property name="studentDAO" ref="studentMybatisDAO"/>
	</bean>
</beans>















