<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- init-method 속성 : Spring Bean 생성 후 한번만 호출되어 초기화 작업을 실행하기 위한 
	메소드명을 속성값으로 설정 - 자동 완성기능 사용 가능 -->
	<!-- destroy-method 속성 : Spring Bean 소멸 전 한번만 호출되어 마무리 작업을 실행하기 위한 
	메소드명을 속성값으로 설정 - 자동 완성기능 사용 가능 -->
	<bean class="site.itwill04.bean.InitDestroyMethodBean" id="initDestroyMethodBean"
		init-method="init" destroy-method="destory"/>
		
	<!-- lazy-init 속성 : false 또는 true 중 하나를 속성값으로 설정 -->
	<!-- => false(기본) : Spring Bean 생성, true : Spring Bean 미생성 -->	
	<!-- => lazy-init 속성값을 true로 설정한 경우 getBean() 메소드 호출시 Spring Bean 생성 -->
	<bean class="site.itwill04.bean.LazyInitBean" id="lazyInitBean" lazy-init="true"/>
	
	<!-- 싱글톤 클래스 : 프로그램에 객체를 하나만 제공하기 위해 작성된 클래스 -->
	<!-- Spring Container는 리플렉션 기능을 이용하여 객체 생성 -->
	<!-- => 생성자가 은닉화 선언되어 있어도 리플렉션 기능에 의해 생성자 사용 가능 -->
	<!-- 리플렉션 기능에 의해 클래스가 메모리에 저장된 후 정적영역의 명령으로 객체 생성 - 2개의 객체 생성 -->
	<!-- factory-method 속성 : 싱글톤 클래스에서 객체를 반환하는 메소드를 속성값으로 설정 -->
	<!-- => Spring Container가 객체를 생성하지 않고 정적영역에서 생성된 객체를 Spring Bean으로 등록 -->
	<bean class="site.itwill04.bean.FactoryMethodBean" factory-method="getFactoryMethodBean"/>
	
	<!-- scope 속성 : Spring Bean 생성 갯수(singleton:기본 OR prototype) 또는 
	사용범위(request 또는 session) 중 하나를 속성값으로 설정 -->
	<!-- scope 속성값으로 singleton을 설정한 경우 bean 엘리먼트에 등록된 클래스로 Spring Bean을 
	하나만 생성하여 제공 -->
	<bean class="site.itwill04.bean.ScopeBean" id="singleton" lazy-init="true" scope="singleton"/>	

	<!-- scope 속성값으로 prototype을 설정한 경우 bean 엘리먼트에 등록된 클래스로 Spring Bean을 
	여러개 생성하여 제공 -->
	<!-- => lazy-init 속성값을 반드시 true로 설정하여 사용 -->
	<bean class="site.itwill04.bean.ScopeBean" id="prototype" lazy-init="true" scope="prototype"/>
	
	<!-- Spring Container는 bean 엘리먼트 선언 순서대로 클래스를 Spring Bean으로 등록 -->
	<!-- depends-on 속성 : bean 엘리먼트의 beanName을 속성값으로 설정 -->
	<!-- => 속성값으로 설정된 bean 엘리먼트의 클래스를 먼저 Spring Bean으로 등록 -->
	<bean class="site.itwill04.bean.DependsOnOneBean" depends-on="dependsOnTwoBean"/>
	<bean class="site.itwill04.bean.DependsOnTwoBean" id="dependsOnTwoBean"/>	
</beans>
